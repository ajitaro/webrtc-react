import React, { useState, useEffect, useRef } from 'react'
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'
import './App.css'
// import Peer from 'simple-peer'
import {Peer} from "https://esm.sh/peerjs@1.5.2?bundle-deps"
import { socket } from './socket'

// peerjs --port 3001

const myPeer = new Peer(undefined, {
  host: '/',
  port: '3001'
})

function App() {
  const [me, setMe] = useState('')
  const [stream, setStream] = useState()
  const [receivingCall, setReceivingCall] = useState(false)
  const [caller, setCaller] = useState('')
  const [callerSignal, setCallerSignal] = useState()
  const [callAccepted, setCallAccepted] = useState(false)
  const [idToCall, setIdToCall] = useState('')
  const [callEnded, setCallEnded] = useState(false)
  const [name, setName] = useState('')

  const [isConnected, setIsConnected] = useState(socket.connected)
  const [fooEvents, setFooEvents] = useState([])

  const myVideo = useRef(null)
  const userVideo = useRef(null)
  const connectionRef = useRef()

  const peers = {}

  useEffect(() => {
    function onConnect() {
      setIsConnected(true)
    }

    function onDisconnect() {
      setIsConnected(false)
    }

    function onFooEvent(value) {
      setFooEvents(previous => [...previous, value])
    }

    socket.on('connect', onConnect)
    socket.on('disconnect', onDisconnect)
    socket.on('foo', onFooEvent)

    return () => {
      socket.off('connect', onConnect)
      socket.off('disconnect', onDisconnect)
      socket.off('foo', onFooEvent)
    }
  }, [])

  useEffect(() => {
    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
      .then((stream) => {
        setStream(stream)
        console.log('stream : ', stream)
        console.log('socket', socket)
        myVideo.current.srcObject = stream

        myPeer.on('call', call => {
          call.answer(stream)
          call.on('stream', userVideoStream => {
            userVideo.current.srcObject = userVideoStream
          })
        })

        socket.on('user-connected', userId => {
          connectToNewUser(userId, stream)
        })
      })

      socket.on('user-disconnected', userId => {
        if (peers[userId]) peers[userId].close()
      })

      myPeer.on('open', id => {
        // socket.emit('join-room', ROOM_ID, id)
        console.log('id: ', id)
      })
  }, [])

  function connectToNewUser (userId, stream) {
    const call = myPeer.call(userId, stream)
    call.on('stream', userVideoStream => {
      userVideo.current.srcObject = userVideoStream
    })
    call.on('close', () => {
      userVideo.current.remove()
    })
  
    peers[userId] = call
  }

  const callUser = (id) => {
    const peer = new Peer(undefined, {
      host: '/',
      port: '3001'
    })
  }

  return (
    <>
      <p>State: {'' + isConnected}</p>
      <ul>
        {fooEvents.map((event, index) => (
          <li key={index}>{event}</li>
        ))}
      </ul>
      <button onClick={() => socket.connect()} >Connect</button>
      <button onClick={() => socket.disconnect()}>Disconnect</button>
      <div>
        <video playsInline ref={myVideo} muted autoPlay width="300" height="200" />
        <video playsInline ref={userVideo} muted autoPlay width="300" height="200" />
      </div>
    </>
  )
}

export default App
